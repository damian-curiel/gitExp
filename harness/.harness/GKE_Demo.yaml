pipeline:
    name: GKE Demo
    identifier: GKE_Demo
    allowStageExecutions: false
    projectIdentifier: Latam_Arilines
    orgIdentifier: default
    tags: {}
    properties:
        ci:
            codebase:
                connectorRef: account.githubdamianaccount
                repoName: GKE_demo_latam
                build: <+input>
    stages:
        - stage:
              name: Technology
              identifier: Technology
              type: CI
              spec:
                  cloneCodebase: true
                  infrastructure:
                      type: KubernetesDirect
                      spec:
                          connectorRef: account.LATAM_SE
                          namespace: harness-delegate
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: Determine Technology from trigger
                                identifier: Determine_Technology_from_trigger
                                spec:
                                    connectorRef: account.DockerDC
                                    image: bash:devel-alpine3.15
                                    command: |-
                                        echo "Detectando tecnolog√≠a..."
                                        echo "Propiedades de trigger:  "

                                        echo "Repo de payload: <+trigger.payload.repository.name>"

                                        echo "tipo: <+trigger.type>"
                                        echo "Repo: <+trigger.sourceRepo>"
                                        echo "Evento: <+trigger.event>"
                                        echo "Rama destino: <+trigger.targetBranch>"
                                        echo "Rama origen: <+trigger.sourceBranch>"
                                        echo "PR #: <+trigger.prNumber>"
                                        echo "PR Titulo: <+trigger.prTitle>"
                                        echo "Usuario: <+trigger.gitUser>"
                                        echo "URL repo: <+trigger.repoUrl>"
                                        echo "commit sha: <+trigger.commitSha>"
                                        echo "base commit sha: <+trigger.baseCommitSha>"


                                        tech=<+trigger.payload.repository.name>
                                        trim=${tech%%_*}
                                        echo "trim: $trim"

                                        export technology=${tech%%_*}

                                        #echo "trim: $technology"

                                        #<+pipeline.variables.technology>=$trim

                                        #echo "<+trigger.payload.repository.name>"
                                    outputVariables:
                                        - name: technology
                                    shell: Bash
        - parallel:
              - stage:
                    name: Build Kubernetes
                    identifier: Build_Kubernetes
                    type: CI
                    spec:
                        cloneCodebase: false
                        infrastructure:
                            useFromStage: Technology
                        execution:
                            steps:
                                - step:
                                      type: Run
                                      name: git Clone
                                      identifier: git_Clone
                                      spec:
                                          connectorRef: account.DockerDC
                                          image: alpine/git:latest
                                          command: |-
                                              echo "Borrando temporales..."

                                              #rm -r /harness/*
                                              pwd
                                              ls

                                              echo "Descargando proyecto correspondiente..."


                                              git clone https://github.com/damian-curiel/GKE_demo_latam.git
                                              cd GKE_demo_latam


                                              echo "Proyecto descargado:"
                                              pwd
                                              ls -a
                                - parallel:
                                      - step:
                                            type: Run
                                            name: isPython
                                            identifier: test
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: |-
                                                    echo "test"

                                                    echo "Generando archivo YAML de despliegue..."
                                                    echo "apiVersion: apps/v1
                                                    kind: Deployment
                                                    metadata:
                                                      name: pacifico-app
                                                      labels:
                                                        app: pacifico
                                                    spec:
                                                      selector:
                                                        matchLabels:
                                                          app: pacifico
                                                      template:
                                                        metadata:
                                                          labels:
                                                            app: pacifico
                                                        spec:
                                                          containers:
                                                          - image: {{.Values.image}}
                                                            name: pacifico
                                                            ports:
                                                            - containerPort: {{.Values.port}}" > app.yaml
                                                    cat app.yaml
                                                    echo "Generando archivo YAML de values..."
                                                    echo "
                                                    name: harness-example
                                                    replicas: 1

                                                    image: <+artifact.image>
                                                    port: 8080" > values.yaml
                                      - step:
                                            type: Run
                                            name: isJava
                                            identifier: isJava
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: bash:4.0.44
                                                command: |
                                                    #!/bin/bash
                                                    cd GKE_demo_latam

                                                    salida="false"
                                                    #Is Python??
                                                    count=`ls -1 *.py 2>/dev/null | wc -l`
                                                    if [ $count != 0 ]
                                                    then 
                                                    salida="python"
                                                    echo "Es python: $salida"
                                                    export language=$salida
                                                    else
                                                    echo "No es Python"

                                                    #is Java??
                                                    count=`ls -1 *.java 2>/dev/null | wc -l`
                                                    if [ $count != 0 ]
                                                    then 
                                                    salida="java"
                                                    echo "Es java: $salida"
                                                    export language=$salida
                                                    else
                                                    echo "No es Java"

                                                    #is NodeJS?
                                                    count=`ls -1 *.js 2>/dev/null | wc -l`
                                                    if [ $count != 0 ]
                                                    then 
                                                    salida="nodejs"
                                                    echo "Es NodeJS: $salida"
                                                    export language=$salida
                                                    else
                                                    echo "No es NodeJS"

                                                    #is React?
                                                    count=`ls -1 *.jsx 2>/dev/null | wc -l`
                                                    if [ $count != 0 ]
                                                    then 
                                                    salida="react"
                                                    echo "Es react: $salida"
                                                    export language=$salida
                                                    else
                                                    echo "No es react"

                                                    #is Angular?
                                                    count=`ls -1 *.ts 2>/dev/null | wc -l`
                                                    if [ $count != 0 ]
                                                    then 
                                                    salida="angular"
                                                    echo "Es angular: $salida"
                                                    export language=$salida
                                                    echo "No es ning√∫n tipo de lenguaje conocido"
                                                    fi
                                                    fi
                                                    fi
                                                    fi
                                                    fi
                                                outputVariables:
                                                    - name: language
                                                shell: Bash
                                      - step:
                                            type: Run
                                            name: isAngular
                                            identifier: isNodeJS
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: echo "Es Angular"
                                      - step:
                                            type: Run
                                            name: isReact
                                            identifier: isGo
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: echo "es React"
                                - step:
                                      type: Run
                                      name: git commit yaml
                                      identifier: git_commit_yaml
                                      spec:
                                          connectorRef: account.DockerDC
                                          image: alpine/git:latest
                                          command: |-
                                              echo "Uploading App.yaml generated..."
                                              cd GKE_demo_latam
                                              git add app.yaml
                                              git add values.yaml
                                              git status
                                              git commit -m "Add harness app.yaml and values.yaml file auto-generated"
                                              git push
                                - step:
                                      type: Run
                                      name: Compile Java
                                      identifier: Compile_Java
                                      spec:
                                          connectorRef: account.DockerDC
                                          image: maven:3-openjdk-8
                                          command: |-
                                              echo "Listing Directory and files"
                                              cd GKE_demo_latam
                                              pwd
                                              ls -ltra

                                              echo "Starting Build"

                                              mvn -B -DskipTests clean package

                                              echo "Build Finished"
                                      when:
                                          stageStatus: Success
                                          condition: <+execution.steps.isJava.output.outputVariables.language> == "java"
                                      failureStrategies: []
                                - step:
                                      type: BuildAndPushDockerRegistry
                                      name: Build and push image
                                      identifier: Build_and_push_image
                                      spec:
                                          connectorRef: account.DockerDC
                                          repo: fcuriel/latam
                                          tags:
                                              - GKE-<+pipeline.sequenceId>
                                          dockerfile: /harness/GKE_demo_latam/Dockerfile
                                          context: /harness/GKE_demo_latam/
                                      failureStrategies: []
                    when:
                        pipelineStatus: Success
                        condition: <+pipeline.stages.Technology.spec.execution.steps.Determine_Technology_from_trigger.output.outputVariables.technology> == "GKE"
              - stage:
                    name: Build AppEngine
                    identifier: Build_AppEngine
                    type: CI
                    spec:
                        cloneCodebase: true
                        infrastructure:
                            useFromStage: Technology
                        execution:
                            steps:
                                - parallel:
                                      - step:
                                            type: Run
                                            name: isPython
                                            identifier: test
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: echo "Es Python"
                                      - step:
                                            type: Run
                                            name: isJava
                                            identifier: isJava
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: echo "es Java"
                                      - step:
                                            type: Run
                                            name: isGo
                                            identifier: isNodeJS
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: echo "Es GO"
                                      - step:
                                            type: Run
                                            name: isNodeJS
                                            identifier: isGo
                                            spec:
                                                connectorRef: account.DockerDC
                                                image: nginx:alpine
                                                command: echo "es Node JS"
                    when:
                        pipelineStatus: Success
                        condition: <+pipeline.stages.Technology.spec.execution.steps.Determine_Technology_from_trigger.output.outputVariables.technology> == "appengine"
              - stage:
                    name: Build GCS
                    identifier: Build_GCS
                    type: CI
                    spec:
                        cloneCodebase: true
                        infrastructure:
                            useFromStage: Technology
                        execution:
                            steps:
                                - step:
                                      type: Run
                                      name: Upload to GCS
                                      identifier: Upload_to_GCS
                                      spec:
                                          connectorRef: account.DockerDC
                                          image: google/cloud-sdk:latest
                                          command: echo "Cargando proyecto a bucket..."
                    when:
                        pipelineStatus: Success
                        condition: <+pipeline.stages.Technology.spec.execution.steps.Determine_Technology_from_trigger.output.outputVariables.technology> == "GCS"
        - stage:
              name: Deploy Kubernetes
              identifier: Deploy_Kubernetes
              description: ""
              type: Deployment
              spec:
                  serviceConfig:
                      serviceRef: k8s_sample_app
                      serviceDefinition:
                          type: Kubernetes
                          spec:
                              variables: []
                              manifests:
                                  - manifest:
                                        identifier: Dynamic_GKE
                                        type: K8sManifest
                                        spec:
                                            store:
                                                type: Github
                                                spec:
                                                    connectorRef: account.githubdamianaccount
                                                    gitFetchType: Branch
                                                    paths:
                                                        - app.yaml
                                                    repoName: GKE_demo_latam
                                                    branch: master
                                            skipResourceVersioning: false
                  infrastructure:
                      environmentRef: Desarrollo
                      infrastructureDefinition:
                          type: KubernetesDirect
                          spec:
                              connectorRef: account.LATAM_SE
                              namespace: harness-delegate
                              releaseName: release-<+INFRA_KEY>
                      allowSimultaneousDeployments: false
                  execution:
                      steps:
                          - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                    skipDryRun: false
                      rollbackSteps:
                          - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec: {}
                  serviceDependencies: []
              tags: {}
              failureStrategies:
                  - onFailure:
                        errors:
                            - AllErrors
                        action:
                            type: StageRollback
              when:
                  pipelineStatus: Success
                  condition: <+pipeline.stages.Technology.spec.execution.steps.Determine_Technology_from_trigger.output.outputVariables.technology> == "GKE"
    variables:
        - name: technology
          type: String
          value: ""
